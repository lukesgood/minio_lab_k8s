# MinIO Tenant with Custom Storage Paths
# This example shows how to deploy MinIO with custom PV paths

---
# Custom Storage Class for MinIO
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: minio-custom-storage
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
provisioner: rancher.io/local-path
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain
allowVolumeExpansion: true

---
# Custom ConfigMap for Local Path Provisioner
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-custom-path-config
  namespace: local-path-storage
data:
  config.json: |-
    {
      "nodePathMap": [
        {
          "node": "DEFAULT_PATH_FOR_NON_LISTED_NODES",
          "paths": ["/data/minio-storage"]
        }
      ]
    }
  setup: |-
    #!/bin/sh
    set -eu
    # Create directory with proper permissions for MinIO
    mkdir -m 0755 -p "$VOL_DIR"
    # Set ownership for MinIO user (1000:1000)
    chown 1000:1000 "$VOL_DIR" 2>/dev/null || true
  teardown: |-
    #!/bin/sh
    set -eu
    rm -rf "$VOL_DIR"

---
# MinIO Credentials Secret
apiVersion: v1
kind: Secret
metadata:
  name: minio-custom-creds
  namespace: minio-tenant
type: Opaque
stringData:
  config.env: |
    export MINIO_ROOT_USER=admin
    export MINIO_ROOT_PASSWORD=password123

---
# MinIO Tenant with Custom Storage
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio-custom-storage
  namespace: minio-tenant
spec:
  image: minio/minio:RELEASE.2025-04-08T15-41-24Z
  configuration:
    name: minio-custom-creds
  pools:
  - servers: 1
    name: pool-0
    volumesPerServer: 4
    volumeClaimTemplate:
      metadata:
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: minio-custom-storage  # Use custom storage class
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
  mountPath: /export
  requestAutoCert: false
  features:
    bucketDNS: false
    domains: {}
  users:
  - name: storage-user
